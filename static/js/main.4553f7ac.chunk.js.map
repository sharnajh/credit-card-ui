{"version":3,"sources":["CreditCard.js","App.js","serviceWorker.js","index.js"],"names":["CreditCard","state","cardNumber","cardHolderName","cardExpirationDate","cardCVC","cardType","flipCard","anime","targets","rotateY","duration","easing","unFlipCard","setCardType","type","setState","checkSubstring","length","match","substring","setNumber","e","target","value","setName","toUpperCase","setDate","setCVC","this","console","log","className","id","placeholder","options","creditCard","name","onChange","style","display","flexDirection","width","date","delimiter","datePattern","numeral","maxLength","onFocus","onBlur","React","Component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4553f7ac.chunk.js","sourcesContent":["import React from \"react\";\nimport Cleave from \"cleave.js/react\";\nimport anime from \"animejs/lib/anime.es.js\";\nimport {\n  FaCcAmex,\n  FaCcDinersClub,\n  FaCcDiscover,\n  FaCcJcb,\n  FaCcMastercard,\n  FaCcVisa,\n  FaCreditCard\n} from \"react-icons/fa\";\n\nclass CreditCard extends React.Component {\n  state = {\n    cardNumber: \"0000 0000 0000 0000\",\n    cardHolderName: \"\",\n    cardExpirationDate: \"\",\n    cardCVC: \"\",\n    cardType: \"\"\n  };\n  flipCard = () => {\n    anime({\n      targets: \".credit-card-inner\",\n      rotateY: \"180deg\",\n      duration: \"100\",\n      easing: \"linear\"\n    });\n  };\n  unFlipCard = () => {\n    anime({\n      targets: \".credit-card-inner\",\n      rotateY: \"360deg\",\n      duration: \"100\",\n      easing: \"linear\"\n    });\n  };\n  setCardType = type => {\n    this.setState({ cardType: type });\n  };\n  checkSubstring = (length, match) => {\n    return this.state.cardNumber.substring(0, length) === match;\n  };\n  setNumber = e => {\n    const cardNumber = e.target.value;\n    this.setState({ cardNumber }, () => {\n      const { cardNumber } = this.state;\n      if (cardNumber[0] === \"4\") {\n        this.setCardType(\"Visa\");\n      } else if (this.checkSubstring(4, \"6011\")) {\n        this.setCardType(\"Discover\");\n      } else if (this.checkSubstring(2, \"51\")) {\n        this.setCardType(\"MasterCard\");\n      } else if (this.checkSubstring(2, \"34\")) {\n        this.setCardType(\"AmericanExpress\");\n      } else if (this.checkSubstring(3, \"300\")) {\n        this.setCardType(\"DinersClub\");\n      } else if (this.checkSubstring(2, \"35\")) {\n        this.setCardType(\"JCB\");\n      } else {\n        this.setCardType(\"\");\n      }\n    });\n  };\n  setName = e => {\n    const cardHolderName = e.target.value.toUpperCase();\n    this.setState({ cardHolderName });\n  };\n  setDate = e => {\n    const cardExpirationDate = e.target.value;\n    this.setState({ cardExpirationDate });\n  };\n  setCVC = e => {\n    const cardCVC = e.target.value;\n    this.setState({ cardCVC });\n  };\n  render() {\n    const {\n      cardNumber,\n      cardHolderName,\n      cardExpirationDate,\n      cardCVC,\n      cardType\n    } = this.state;\n    console.log(this.state);\n    return (\n      <div className=\"container\">\n        <div className=\"credit-card\">\n          <div className=\"credit-card-inner\">\n            <div className=\"credit-card-front\">\n              <div id=\"card-type\">\n                {cardType === \"\" && <FaCreditCard />}\n                {cardType === \"Discover\" && <FaCcDiscover />}\n                {cardType === \"AmericanExpress\" && <FaCcAmex />}\n                {cardType === \"Visa\" && <FaCcVisa />}\n                {cardType === \"DinersClub\" && <FaCcDinersClub />}\n                {cardType === \"JCB\" && <FaCcJcb />}\n                {cardType === \"MasterCard\" && <FaCcMastercard />}\n              </div>\n\n              <div id=\"card-number\">{cardNumber}</div>\n\n              <div id=\"card-expiration\">\n                {cardExpirationDate !== \"\" && <div id=\"validthru\">Valid Thru</div>}\n                {cardExpirationDate}\n              </div>\n\n              <div id=\"card-holder-name\">{cardHolderName}</div>\n            </div>\n            <div className=\"credit-card-back\">\n              <div className=\"card-stripe\" />\n              <div className=\"card-sig-container\">\n                <div className=\"signature\">{cardHolderName}</div>\n                CVC {cardCVC}\n              </div>\n              <p className=\"credits\">Built with Cleave.js, Anime.js, and React Icons.</p>\n            </div>\n          </div>\n        </div>\n        <form className=\"card-form\">\n          <label className=\"input-label\">Credit Card Number</label>\n          <Cleave\n            placeholder=\"Enter your credit card number\"\n            options={{ creditCard: true }}\n            id=\"number-input\"\n            name=\"number-input\"\n            className=\"text-input\"\n            onChange={this.setNumber}\n          />\n          <label className=\"input-label\">Card Holder Name</label>\n          <input\n            type=\"text\"\n            placeholder=\"Enter card holder name\"\n            value={cardHolderName}\n            onChange={e => this.setName(e)}\n            className=\"text-input\"\n          />\n          <div className=\"date-and-csv\" style={{ display: \"flex\" }}>\n            <div\n              style={{ display: \"flex\", flexDirection: \"column\", width: \"50%\" }}\n            >\n              <label className=\"input-label\">\n                Expiration Date\n              </label>\n              <Cleave\n                options={{\n                  date: \"true\",\n                  delimiter: \"/\",\n                  datePattern: [\"Y\", \"m\"]\n                }}\n                placeholder=\"Enter expiration date\"\n                value={cardExpirationDate}\n                className=\"text-input\"\n                onChange={e => this.setDate(e)}\n              />\n            </div>\n            <div\n              style={{ display: \"flex\", flexDirection: \"column\", width: \"50%\" }}\n            >\n              <label className=\"input-label\">CVC Security Code</label>\n              <Cleave\n                options={{\n                  numeral: \"true\"\n                }}\n                placeholder=\"Enter CVC\"\n                maxLength=\"3\"\n                value={cardCVC}\n                className=\"text-input\"\n                onChange={e => this.setCVC(e)}\n                onFocus={this.flipCard}\n                onBlur={this.unFlipCard}\n              />\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CreditCard;\n","import React from \"react\";\nimport \"./App.css\";\n// import Particles from \"./Particles\";\n// import Boid from \"./Boid\";\n// import StackOverflow from \"./StackOverflow\";\nimport CreditCard from \"./CreditCard\"\n\n// Experimenting with cool and new things.\n\nfunction App() {\n    return (\n      <div>\n        <CreditCard />\n      </div>\n    );\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}